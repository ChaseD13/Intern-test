{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["randomString","require","App","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","setTrigger","_useState5","_useState6","setDel","_useState7","_useState8","todos","setTodos","addTodo","text","newTodos","concat","toConsumableArray","complete","react_default","a","createElement","react","className","onSubmit","e","preventDefault","type","onChange","target","placeholder","required","map","todo","index","key","style","display","c","onClick","completeTodo","textDecoration","v","splice","removeTodo","totalTasks","i","length","findTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAMIA,SAAeC,EAAQ,KA2GZC,MApGf,WAA4B,IAAAC,EACAC,mBAAiB,IADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACZI,EADYJ,EAAA,GAAAK,EAEIN,mBAAiB,IAFrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEVE,GAFUD,EAAA,GAAAA,EAAA,IAAAE,EAGJT,mBAAiB,IAHbU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAGdE,GAHcD,EAAA,GAAAA,EAAA,IAAAE,EAIAZ,mBAAkB,IAJlBa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAInBE,EAJmBD,EAAA,GAIZE,EAJYF,EAAA,GAsBpBG,EAAU,SAACC,GACf,IAAMC,EAAiB,GAAAC,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAOY,GAAP,CAAc,CAAEG,OAAMI,UAAU,KACvDN,EAASG,IA2BX,OACEI,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAY,4BACfJ,EAAAC,EAAAC,cAAA,QAAMG,SAhDW,SAACC,GACpBA,EAAEC,iBACFb,EAAQZ,GACRC,EAAS,KA6CuBqB,UAAY,kBACxCJ,EAAAC,EAAAC,cAAA,WAASE,UAAY,kBACfJ,EAAAC,EAAAC,cAAA,MAAIE,UAAY,0BAAhB,iBAENJ,EAAAC,EAAAC,cAAA,WAASE,UAAY,mBACnBJ,EAAAC,EAAAC,cAAA,SACEM,KAAK,OACL1B,MAAOA,EACP2B,SAAU,SAAAH,GAAC,OAAIvB,EAASuB,EAAEI,OAAO5B,QACjC6B,YAAc,yBACdC,UAAQ,EACRR,UAAY,sBAKlBJ,EAAAC,EAAAC,cAAA,WAASE,UAAY,cAClBZ,EAAMqB,IAAI,SAACC,EAAaC,GAAd,OACTf,EAAAC,EAAAC,cAAA,OAAKc,IAAKD,EAAOE,MAAO,CAAEC,QAAS,SACjClB,EAAAC,EAAAC,cAAA,SACIM,KAAK,WACL1B,MAASR,IACTmC,SAAU,SAAAU,GAAC,OAAIjC,EAAWiC,EAAET,OAAO5B,QACnCsC,QAAU,kBAlDH,SAACL,GACpB,IAAMnB,EAAoBJ,EAC1BI,EAASmB,GAAOhB,UAAYH,EAASmB,GAAOhB,SAC5CN,EAASG,GA+CmByB,CAAaN,IAC7BX,UAAY,uBAEhBJ,EAAAC,EAAAC,cAAA,OAAKe,MAAO,CAAEK,eAAgBR,EAAKf,SAAW,eAAiB,IAAKK,UAAY,kBAC3EU,EAAKnB,MAEVK,EAAAC,EAAAC,cAAA,SACIM,KAAK,WACL1B,MAASR,IACTmC,SAAU,SAAAc,GAAC,OAAIlC,EAAOkC,EAAEb,OAAO5B,QAC/BsC,QAAU,kBAtDL,SAACL,GAClB,IAAMnB,EAAoBJ,EAC1BI,EAAS4B,OAAOT,EAAO,GACvBtB,EAASG,GAmDmB6B,CAAWV,IAC3BX,UAAY,yBAKtBJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAME,UAAY,0BAAlB,gBAvDa,WAEf,IADA,IAAIsB,EAAa,EACRC,EAAI,EAAGA,EAAInC,EAAMoC,SAAUD,EAEV,GAArBnC,EAAMmC,GAAG5B,UAEV2B,IAGJ,OAAOA,EA8CoDG,GAAzD,QC/FcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1bddf159.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport { Provider, observer, inject } from 'mobx-react';\nimport './App.css'\n\n\ntype FormElem = React.FormEvent<HTMLFormElement>\nvar randomString = require('random-string');\n\ninterface ITodo {\n  text: string\n  complete: boolean\n}\n\nfunction App(): JSX.Element {\n  const [value, setValue] = useState<string>('')\n  const [trigger, setTrigger] = useState<string>('')\n  const [del, setDel] = useState<string>('')\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  const handleSubmit = (e: FormElem): void => {\n    e.preventDefault()\n    addTodo(value)\n    setValue('')\n  }\n\n  const triggerUpdate = (c: FormElem): void => {\n    c.preventDefault()\n    setTrigger('')\n  }\n\n  const delUpdate = (v: FormElem): void => {\n    v.preventDefault()\n    setDel('')\n  }\n\n  const addTodo = (text: string): void => {\n    const newTodos: ITodo[] = [...todos, { text, complete: false }]\n    setTodos(newTodos)\n  }\n\n  const completeTodo = (index: number): void => {\n    const newTodos: ITodo[] = todos\n    newTodos[index].complete = !newTodos[index].complete\n    setTodos(newTodos)\n  }\n\n  const removeTodo = (index: number): void => {\n    const newTodos: ITodo[] = todos\n    newTodos.splice(index, 1)\n    setTodos(newTodos)    \n  }\n\n  const findTodo = (): number => {\n    var totalTasks = 0\n    for (var i = 0; i < todos.length; ++i) \n    {\n      if(todos[i].complete == false)\n      {\n        totalTasks++\n      }\n    }\n    return totalTasks\n  }\n\n  return (\n    <Fragment>\n    <div className = \"card todo-list-container\">\n      <form onSubmit={handleSubmit} className = \"todo-list-form\">\n        <section className = \"header-section\"> \n              <h1 className = \"text-center white-text\">Things To Do</h1>\n        </section>\n        <section className = \"content-section\">\n          <input\n            type='text'\n            value={value}\n            onChange={e => setValue(e.target.value)}\n            placeholder = \"What needs to be done?\"\n            required\n            className = \"todo-list-input\"\n            >\n          </input>\n        </section>\n      </form>\n      <section className = \"todo-items\">\n        {todos.map((todo: ITodo, index: number) => (\n          <div key={index} style={{ display: 'flex' }}>\n            <input\n                type='checkbox'\n                value = {randomString()}\n                onChange={c => setTrigger(c.target.value)}\n                onClick ={() => completeTodo(index)} \n                className = \"todo-list-complete\" >\n            </input>\n            <div style={{ textDecoration: todo.complete ? 'line-through' : ''}} className = \"todo-list-item\">\n                {todo.text}\n            </div>\n            <input\n                type='checkbox'\n                value = {randomString()}\n                onChange={v => setDel(v.target.value)}\n                onClick ={() => removeTodo(index)}\n                className = \"todo-list-delete\"  >\n            </input>\n          </div>\n        ))}\n      </section>\n      <hr></hr>\n      <span className = \"text-italic tasks-left\"> Tasks left: {findTodo()} </span>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}